; @module Spike
; @device S
; Wheel, copyright (c) 2020 - present by Arno van der Vegt
; Distributed under an MIT license: https://arnovandervegt.github.io/wheel/license.txt

; @description
; This file contains procedures to communicate with Spike devices

; @const The Spike module.
#define MODULE_SPIKE                           14  ; `image:images/spike/spike64.png`

; @const The Spike output ports.
#define SPIKE_OUTPUT_A                          0
#define SPIKE_OUTPUT_B                          1
#define SPIKE_OUTPUT_C                          2
#define SPIKE_OUTPUT_D                          3
#define SPIKE_OUTPUT_E                          4
#define SPIKE_OUTPUT_F                          5

; @const The Spike input ports.
#define SPIKE_PORT_A                            0
#define SPIKE_PORT_B                            1
#define SPIKE_PORT_C                            2
#define SPIKE_PORT_D                            3
#define SPIKE_PORT_E                            4
#define SPIKE_PORT_F                            5

; @const Module calls for spike functions.
#define SPIKE_LAYER_START                       0
#define SPIKE_LAYER_CLEAR_LEDS                  1
#define SPIKE_LAYER_SET_LED                     2
#define SPIKE_LAYER_SET_TEXT                    3
#define SPIKE_LAYER_SET_ULTRASONIC_LIGHT        4

; @const Devive types.
#define SPIKE_DEVICE_MEDIUM_MOTOR               1 ; `image:images/spike/motorMedium64.png`
#define SPIKE_DEVICE_LARGE_MOTOR                2 ; `image:images/spike/motorLarge64.png`

; @record A record to contain vector data for acceleration and tilt values.
record SpikeVector
    number x, y, z
end

; @record A record for button, tilt and acceleration status data.
record SpikeStatus
    ; @field The device button value.
    number          button
    ; @field The gyro vector.
    SpikeVector gyro
    ; @field The acceleration vector.
    SpikeVector accel
    ; @field The position vector.
    SpikeVector pos
end

; @record The status of the Spike device for all layers.
record SpikeDevices
    ; @field Spike status data for all four layers.
    SpikeStatus layer[4]
union
    ; @field Spike status data for layer one.
    SpikeStatus layer1
    ; @field Spike status data for layer two.
    SpikeStatus layer2
    ; @field Spike status data for layer three.
    SpikeStatus layer3
    ; @field Spike status data for layer four.
    SpikeStatus layer4
end

; @var Spike device status data.
SpikeDevices spikeDevices

; @proc             Start reading updates from the Spike devices.
proc spikeLayerStart()
    addr spikeDevices
    mod  MODULE_SPIKE, SPIKE_LAYER_START
end

; @proc             Set the brightness of a led in the matrix.
; @param layer      The layer.
proc spikeLayerClearLeds(number layer)
    addr layer
    mod  MODULE_SPIKE, SPIKE_LAYER_CLEAR_LEDS
end

; @proc             Set the brightness of a led in the matrix.
; @param layer      The layer.
; @param x          The column.
; @param y          The row.
; @param brightness The let brightness.
proc spikeLayerSetLed(number layer, number x, number y, number brightness)
    addr layer
    mod  MODULE_SPIKE, SPIKE_LAYER_SET_LED
end

; @proc             Show a text on the led matrix.
; @param text       The text.
proc spikeLayerSetText(number layer, string text)
    addr layer
    mod  MODULE_SPIKE, SPIKE_LAYER_SET_TEXT
end

proc spikeLayerSetUltrasonicLight(number layer, number port, number topLeft, number topRight, number bottomLeft, number bottomRight)
    addr layer
    mod  MODULE_SPIKE, SPIKE_LAYER_SET_ULTRASONIC_LIGHT
end
