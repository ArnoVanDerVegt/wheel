; @module Standard
; Wheel, copyright (c) 2017 - present by Arno van der Vegt
; Distributed under an MIT license: https://arnovandervegt.github.io/wheel/license.txt

; @description
; This file contains standard procedures.

; @const The standard module.
#define MODULE_STANDARD         0

; @const Standard module calls.
#define STANDARD_PRINT_NUMBER   1
#define STANDARD_PRINT_STRING   2
#define STANDARD_PRINT_FORMAT   3
#define STANDARD_END_FORMAT     4
#define STANDARD_CLEAR_CONSOLE  5
#define STANDARD_SLEEP          6
#define STANDARD_STOP_VM        7
#define STANDARD_STOP_PROGRAM   8
#define STANDARD_GET_TIME       9

; @const Boolean constants.
#define TRUE                    1
#define FALSE                   0

; @proc             Print a number in the console.
; @param n          The number to print.
proc printN(number n)
    addr n
    mod  MODULE_STANDARD, STANDARD_PRINT_NUMBER
end

; @proc             Print a string in the console.
; @param n          The string to print.
proc printS(string s)
    addr s
    mod  MODULE_STANDARD, STANDARD_PRINT_STRING
end

; @proc             Set the string formatting.
; @param format     The format, for example: "The number: %n, the text: %s"
proc printFormat(string format)
    addr format
    mod  MODULE_STANDARD, STANDARD_PRINT_FORMAT
end

; @proc             End the string formatting.
proc endFormat()
    mod  MODULE_STANDARD, STANDARD_END_FORMAT
end

; @proc             Clear the console in the IDE.
proc clearConsole()
    mod MODULE_STANDARD, STANDARD_CLEAR_CONSOLE
end

; @proc             Halt the execution of the VM for a given number of milliseconds.
; @param time       Milliseconds to pause.
proc sleep(number time)
    addr time
    mod  MODULE_STANDARD, STANDARD_SLEEP
end

; @proc             Stop the VM, this command does not stop the program.
proc stopVM()
    mod MODULE_STANDARD, STANDARD_STOP_VM
end

; @proc             Stop the program.
proc stopProgram()
    mod MODULE_STANDARD, STANDARD_STOP_PROGRAM
end

; @proc             Get the time value.
; @return           The time value in milliseconds.
proc getTime()
    mod MODULE_STANDARD, STANDARD_GET_TIME
end

; @proc             Keep looping, this traps the VM in an enless loop without stopping.
proc halt()
    repeat
    end
end
