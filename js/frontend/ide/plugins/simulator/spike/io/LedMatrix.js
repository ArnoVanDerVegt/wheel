/**
 * Wheel, copyright (c) 2020 - present by Arno van der Vegt
 * Distributed under an MIT license: https://arnovandervegt.github.io/wheel/license.txt
**/
const DOMNode = require('../../../../../lib/dom').DOMNode;

const CHARACTERS = [
        '0000000000000000000000000', // " "
        '0010000100001000000000100', // "!"
        '0000000000000000000000000', // """
        '0101011111010101111101010', // "#"
        '0111110100011100010111110', // "$"
        '1100110010001000100110011', // "%"
        '0110010010011001001001101', // "&"
        '0100001000000000000000000', // "'"
        '0010001000010000100000100', // "("
        '0100000100001000010001000', // ")"
        '0000001010001000101000000', // "*"
        '0000000100011100010000000', // "+"
        '0000000000000000010001000', // ","
        '0000000000011100000000000', // "-"
        '0000000000000000000001000', // "."
        '0000100010001000100010000', // "/"
        '0010001010010100101000100', // "0"
        '0010001100001000010001110', // "1"
        '0111000010011100100001110', // "2"
        '0111000010011100001001110', // "3"
        '0101001010011100001000010', // "4"
        '0111001000011100001001110', // "5"
        '0111001000011100101001110', // "6"
        '0111000010001000100001000', // "7"
        '0111001010011100101001110', // "8"
        '0111001010011100001001110', // "9"
        '0000000100000000010000000', // ":"
        '0000000100000000010001000', // ";"
        '0001000100010000010000010', // "<"
        '0000001110000000111000000', // "="
        '0100000100000100010001000', // ">"
        '0111010001001100000000100', // "?"
        '0111010001101011001101100', // "@"
        '0110010010111101001010010', // "A"
        '1110010010111001001011100', // "B"
        '0111010000100001000001110', // "C"
        '1110010010100101001011100', // "D"
        '1111010000111001000011110', // "E"
        '1111010000111001000010000', // "F"
        '0111010000100111000101110', // "G"
        '1001010010111101001010010', // "H"
        '1110001000010000100011100', // "I"
        '1111100010000101001001100', // "J"
        '1001010100110001010010010', // "K"
        '1000010000100001000011110', // "L"
        '1000111011101011000110001', // "M"
        '1000111001101011001110001', // "N"
        '0110010010100101001001100', // "O"
        '1110010010111001000010000', // "P"
        '0110010010100100110000110', // "Q"
        '1110010010111001001010001', // "R"
        '0111010000011000001011100', // "S"
        '1111100100001000010000100', // "T"
        '1001010010100101001001100', // "U"
        '1000110001100010101000100', // "V"
        '1000110001101011101110001', // "W"
        '1001010010011001001010010', // "X"
        '1000101010001000010000100', // "Y"
        '1111000100010001000011110', // "Z"
        '0111001000010000100001110', // "["
        '1000001000001000001000001', // "\"
        '0111000010000100001001110', // "]"
        '0010001010000000000000000', // "^"
        '0000000000000000000011111', // "_"
        '0100000100000000000000000', // "`"
        '0000001110100101001001111', // "a"
        '1000010000111001001011100', // "b"
        '0000001110100001000001110', // "c"
        '0001000010011101001001110', // "d"
        '0110010010111001000001110', // "e"
        '0011001000111000100001000', // "f"
        '0111010010011100001001100', // "g"
        '1000010000111001001010010', // "h"
        '0100000000010000100001000', // "i"
        '0001000000000100001001100', // "j"
        '1000010100110001010010010', // "k"
        '0100001000010000100000110', // "l"
        '0000011011101011000110001', // "m"
        '0000011100100101001010010', // "n"
        '0000001100100101001001100', // "o"
        '0000011100100101110010000', // "p"
        '0000001110100100111000010', // "q"
        '0000001110100001000010000', // "r"
        '0000000110010000010011000', // "s"
        '0100001000011100100000111', // "t"
        '0000010010100101001001111', // "u"
        '0000010001100010101000100', // "v"
        '0000010001100011010111011', // "w"
        '0000010010011000110010010', // "x"
        '0000001010010100010011000', // "y"
        '0000011110001000100011110', // "z"
        '0011000100011000010000110', // "{"
        '0100001000010000100001000', // "|"
        '1100001000011000100011000', // "}"
        '0111010001001100000000100'  // "~"
    ];

exports.LedMatrix = class extends DOMNode {
    constructor(opts) {
        super(opts);
        this.initDOM(opts.parentNode);
        this._textTimeout = null;
    }

    initDOM(parentNode) {
        let node = {
                className: 'flt leds',
                children:  []
            };
        for (let y = 0; y < 5; y++) {
            for (let x = 0; x < 5; x++) {
                node.children.push({
                    ref:       this.setRef('led' + y + '_' + x),
                    className: 'flt led'
                });
            }
        }
        this.create(parentNode, node);
    }

    setLed(x, y, brightness) {
        let ref = this._refs['led' + y + '_' + x];
        if (!ref) {
            return;
        }
        if (brightness === 0) {
            ref.style.backgroundColor = 'rgba(0,0,0,0.05)';
        } else if ((brightness > 0) && (brightness <= 100)) {
            ref.style.backgroundColor = 'rgba(255,255,0,' + (brightness / 100) + ')';
        }
    }

    setChar(c) {
        let code = c.charCodeAt(0);
        let ch   = ((code >= 32) && (code < 127)) ? CHARACTERS[code - 32] : '0000000000000000000000000';
        let i    = 0;
        for (let y = 0; y < 5; y++) {
            for (let x = 0; x < 5; x++) {
                this.setLed(x, y, (ch[i] === '0') ? 0 : 100);
                i++;
            }
        }
    }

    setText(text) {
/*
        if ((typeof text !== 'string') || !text.length) {
            return;
        }
        if (this._textTimeout) {
            clearTimeout(this._textTimeout);
        }
        if (text.length === 1) {
            this.setChar(text);
            return;
        }
        text += ' ';
        let buffer = ['', '', '', '', ''];
        for (let i = 0; i < text.length; i++) {
            let code = text.charCodeAt(i);
            let ch   = ((code >= 32) && (code < 127)) ? CHARACTERS[code - 32] : '0111010001001100000000100';
            for (let j = 0; j < 5; j++) {
                buffer[j] += ch.substr(j * 5, 5);
            }
        }
        let i        = 0;
        let callback = () => {
                this._textTimeout = null;
                if (i > buffer[0].length - 5) {
                    return;
                }
                for (let y = 0; y < 5; y++) {
                    for (let x = 0; x < 5; x++) {
                        this.setLed(x, y, (buffer[y][i + x] === '0') ? 0 : 100);
                    }
                }
                this._textTimeout = setTimeout(callback, 110);
                i++;
            };
        callback();
*/
    }

    clear() {
        for (let y = 0; y < 5; y++) {
            for (let x = 0; x < 5; x++) {
                this.setLed(x, y, 0);
            }
        }
    }
};
